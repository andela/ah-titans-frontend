// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NewPassword /> should render without crushing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewPassword />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "data": Object {
        "cpassword": "",
        "new_password": "",
      },
      "errors": Object {},
      "loading": false,
      "onChange": [Function],
      "onSubmit": [Function],
      "onValidate": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "data": Object {
          "cpassword": "",
          "new_password": "",
        },
        "errors": Object {},
        "loading": false,
        "onChange": [Function],
        "onSubmit": [Function],
        "onValidate": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Password Input should call onChange prop 1`] = `
<NewPassForm
  data={
    Object {
      "cpassword": "",
      "new_password": "",
      "undefined": "matched",
    }
  }
  errors={Object {}}
  loading={false}
  onChange={[Function]}
  onSubmit={[Function]}
  onValidate={[Function]}
/>
`;

exports[`Password Input should not submit data due to incorrect input 1`] = `
<NewPassForm
  data={
    Object {
      "cpassword": "aaaAA111",
      "new_password": "aaaAAA111",
    }
  }
  errors={
    Object {
      "cpassword": "Passwords don't match",
    }
  }
  loading={false}
  onChange={[Function]}
  onSubmit={[Function]}
  onValidate={[Function]}
/>
`;
